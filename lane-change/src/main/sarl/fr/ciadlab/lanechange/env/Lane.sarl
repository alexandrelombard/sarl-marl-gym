/** 
 * 
 */
package fr.ciadlab.lanechange.env

import java.util.List
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D
import org.eclipse.xtend.lib.annotations.Accessors
import org.apache.commons.math3.geometry.euclidean.twod.Segment
import org.apache.commons.math3.geometry.euclidean.twod.Line

/** 
 * Model of a lane
 * @author Alexandre Lombard
 * 
 */
class Lane extends Object {

	@Accessors(PUBLIC_GETTER)
	val points : List<Vector2D> = newArrayList

	@Accessors(PUBLIC_GETTER)
	val previousLane : Lane
	
	@Accessors(PUBLIC_GETTER)
	var nextLane : Lane
	
	new() {
		this(null, null)
	}
	
	new(previousLane : Lane) {
		this(previousLane, null)
	}
	
	new(previousLane : Lane, nextLane : Lane) {
		this.previousLane = previousLane
		this.nextLane = nextLane
		
		if(this.previousLane !== null) {
			this.previousLane.nextLane = this
		}
	}
	
	def hasPreviousLane() : Boolean {
		return this.previousLane !== null
	}
	
	def hasNextLane() : Boolean {
		return this.nextLane !== null
	}
	
	/**
	 * Gets a position on the lane knowing its abscissa
	 * @param abscissa the abscissa of the lane
	 * @returns the associated position
	 */
	def getPosition(abscissa : Double) : Vector2D {
		var remainingAbscissa : double = abscissa
		var currentIndex = 0
		var result : Vector2D
		
		while(currentIndex < points.size && 
			remainingAbscissa > points.get(currentIndex).distance(points.get(currentIndex + 1))) {
			remainingAbscissa -= points.get(currentIndex).distance(points.get(currentIndex + 1))
			currentIndex++
		}
		
		if(currentIndex == points.size) {
			result = points.last
		} else {
			val direction = points.get(currentIndex + 1).subtract(points.get(currentIndex)).normalize
			result = points.get(currentIndex).add(remainingAbscissa, direction)
		}
		
		return result	
	}

	/** 
	 * Gets the direction associated to the given abscissa
	 * @param abscissa the abscissa
	 * @returns the direction
	 */
	def getDirection(abscissa : Double) : Vector2D {
		var remainingAbscissa : double = abscissa
		var currentIndex = 0
		var result : Vector2D

		while (currentIndex < points.size &&
			remainingAbscissa > points.get(currentIndex).distance(points.get(currentIndex + 1))) {
			remainingAbscissa -= points.get(currentIndex).distance(points.get(currentIndex + 1))
			currentIndex++
		}

		if (currentIndex == points.size) {
			result = points.get(points.size - 1).subtract(points.get(points.size - 2)).normalize
		} else {
			result = points.get(currentIndex + 1).subtract(points.get(currentIndex)).normalize
		}

		return result
	}
	
	/**
	 * Computes the closest point on this lane to the one given in parameters
	 * @param position the position
	 * @returns the closest point on the lane to the position
	 */
	def getClosestPoint(position : Vector2D) : Vector2D {
		var closestPoint : Vector2D
		var closestDistance = Double.MAX_VALUE
		
		for(var i = 0; i < points.size - 1; i++) {
			val line = new Line(points.get(i), points.get(i + 1), 0.001)
			val segment = new Segment(points.get(i), points.get(i + 1), line)
			
			val distance = segment.distance(position)
			
			if(distance < closestDistance) {
				if(distance.epsilonEquals(segment.start.distance(position))) {
					// The start is the closest point
					closestPoint = segment.start
				} else if (distance.epsilonEquals(segment.end.distance(position))) {
					// The end is the closest point
					closestPoint = segment.end
				} else {
					// The closest point is in the middle of the segment
					val projection = line.project(position) as Vector2D
					closestPoint = projection
				}
			
				closestDistance = distance
			}
		}
		
		return closestPoint
	}
	
	/**
	 * Computes the total length of this lane
	 * @returns the total length
	 */
	def getLength() {
		var length = 0.0
		
		for(var i = 0; i < points.size - 1; i++) {
			length += points.get(i).distance(points.get(i + 1))
		}
		
		return length
	}
	
	private static def epsilonEquals(a : Double, b : Double, tolerance : Double = 0.001) {
		return Math.abs(a - b) < tolerance
	}
	
}
