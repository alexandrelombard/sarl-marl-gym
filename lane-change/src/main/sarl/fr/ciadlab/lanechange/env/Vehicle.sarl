/** 
 * 
 */
package fr.ciadlab.lanechange.env

import javax.annotation.Nonnull
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Model of a vehicle
 * @author Alexandre Lombard
 * 
 */
class Vehicle extends Object {
	
	@Accessors(PUBLIC_GETTER)
	val length : Double
	
	@Accessors(PUBLIC_GETTER)
	val wheelBase : Double

	@Accessors(PUBLIC_GETTER)
	var position : Vector2D = Vector2D.ZERO
	
	@Accessors(PUBLIC_GETTER)
	var direction : Vector2D = new Vector2D(1.0, 0.0)

	@Accessors(PUBLIC_GETTER)
	var velocity : Vector2D = Vector2D.ZERO

	@Accessors(PUBLIC_GETTER)
	var acceleration : Double = 0.0
	
	@Accessors(PUBLIC_GETTER)
	var wheelAngle : Double = 0.0
	
	@Accessors(PUBLIC_GETTER)
	var yaw : Double = 0.0

	@Accessors(PUBLIC_GETTER)
	@Nonnull
	var lane : Lane
	
	@Accessors(PUBLIC_GETTER)
	var state : VehicleState
	
	/**
	 * @param initialPosition the initial position
	 * @param initialDirection the initial direction
	 * @param initialSpeed the initial speed
	 * @param initialLane the reference to the initial lane
	 * @param wheelBase the wheel base of the vehicle (for computing movement)
	 * @param length the length of the vehicle (for computing collisions)
	 */
	new(initialPosition : Vector2D, initialDirection : Vector2D, initialSpeed : Double, @Nonnull initialLane : Lane, 
		wheelBase : Double = 4.0, length : Double = 5.0
	) {
		this.length = length
		this.wheelBase = wheelBase
		this.lane = initialLane
		this.position = initialPosition
		this.direction = initialDirection
		this.velocity = initialDirection.scalarMultiply(initialSpeed)
		this.state = VehicleState.ON_LANE
	}
	
	def setAcceleration(acceleration : Double) {
		// This one is not generated using the @Accessors annotation so we can add limits later
		this.acceleration = acceleration
	}
	
	def setWheelAngle(wheelAngle : Double) {
		// This one is not generated using the @Accessors annotation so we can add limits later
		this.wheelAngle = wheelAngle
	}

	/** 
	 * Update the vehicle
	 */
	def update(deltaTime : Double) {
		synchronized (this) {
			// Get the current direction angle
			val direction = this.velocity.yaw
			
			// Compute the new speed
			val newSpeed = this.velocity.norm + this.acceleration * deltaTime
			
			// Compute the traveled distance during the deltaTime assuming a constant acceleration for the period
			val traveledDistance = this.velocity.norm * deltaTime + 0.5 * this.acceleration * (deltaTime * deltaTime)
											
			// Compute the rotation properties according to the wheel angle
			// val radius = this.wheelBase / Math.tan(this.wheelAngle)
			val radius = this.wheelBase / Math.tan(this.wheelAngle)
			
			var newPosition : Vector2D
			var newDirectionVector : Vector2D
			var newVelocity : Vector2D
			
			if(Math.abs(radius) > 1e7) {
				// We are in a straight line
				newDirectionVector = this.velocity.normalize
				newVelocity = new Vector2D(newSpeed, newDirectionVector)
				newPosition = this.position.add(traveledDistance, newDirectionVector)
			} else {
				val centerAngle = direction + Math.PI / 2.0
				val centerDirection = new Vector2D(Math.cos(centerAngle), Math.sin(centerAngle))
				val center = this.position.add(radius, centerDirection) // The sign of the radius is considered here
				val centralAngle = traveledDistance / radius // Warning: is the radius sign relevant here?
				// Compute the new direction angle according to the wheel angle and the acceleration
				val newDirection = direction + centralAngle
				newDirectionVector = new Vector2D(Math.cos(newDirection), Math.sin(newDirection))

				// Compute the new velocity
				newVelocity = new Vector2D(newSpeed, newDirectionVector)
				// Compute the new position
				val dx = this.position.x - center.x
				val dy = this.position.y - center.y
				newPosition = new Vector2D(
					dx * Math.cos(centralAngle) - dy * Math.sin(centralAngle) + center.x,
					dx * Math.sin(centralAngle) + dy * Math.cos(centralAngle) + center.y)
			}

			// Update everything
			this.velocity = newVelocity
			this.direction = newDirectionVector
			this.position = newPosition
		}
	}
	
	enum VehicleState {
		ON_LANE,
		MERGING
	}
	
	private static def yaw(v : Vector2D) {
		return Math.atan2(v.y, v.x)
	}

}
