/** 
 * 
 */
package fr.ciadlab.lanechange

import fr.ciadlab.lanechange.^agent.DriverAgent
import fr.ciadlab.lanechange.env.LaneChangeEnvironment
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import fr.ciadlab.gym.events.EnvironmentInitialized

/** 
 * Initializes the simulation
 * @author Alexandre Lombard
 * 
 */
agent BootAgent {
	uses Lifecycle, DefaultContextInteractions

	on Initialize {
		val vehiclesCount = 2
		
		val environment = new LaneChangeEnvironment(vehiclesCount)
		
		// Load the agents
		for (var i = 0; i < vehiclesCount; i++) {
			val agentId = spawn(typeof(DriverAgent), environment)
			environment.registerAgent(agentId)
		}
		
		emit(new EnvironmentInitialized)
		
		// Schedule execution
//		every(100.milliseconds) [
//			environment.step
//			
//			emit(new TimeSimulationStep(0.1))
//		]
	}

	on Destroy {
		//
	}
}
